---
## main.yml
- hosts: pi2
  become: true

  vars:
    ansible_python_interpreter: /usr/bin/python3
    ssh_allow_user: "{{ ansible_user | default(ansible_ssh_user) }}"

  vars_files:
    - vars/main.yml

  roles:
    - geerlingguy.pip
    - geerlingguy.docker

  pre_tasks:

    - name: Check ssh_allow_user is defined and have value
      assert:
        that: ssh_allow_user is defined and ssh_allow_user | length >0
        fail_msg: "Usage: ansible-playbook main.yml --extra-vars \"ssh_allow_user=<user>\""

    # Add backport package repo
    - name: Add backports repository
      apt_repository:
        repo: deb http://deb.debian.org/debian bookworm-backports main
        state: present
        update_cache: no

    - name: Ensure apt cache is updated.
      apt:
        update_cache: true
        cache_valid_time: 600

    - name: Install libffi-dev for pip docker-compose install
      apt:
        name: libffi-dev
        state: present

  tasks:

    - name: Copy apparmor/local for bind
      copy:
        src: files/local/usr.sbin.named
        dest: /etc/apparmor.d/local/usr.sbin.named
        mode: 0640
        owner: 'root'
        group: 'root'
      register: r_copy_apparmor_profile

    - name: Set timezone
      timezone:
        name: Europe/Copenhagen

    - name: Install vim and iperf3
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
      loop:
        - vim
        - iperf3

    - name: Remove SSH key from root user
      authorized_key:
        user: root
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub', errors='ignore') }}"
        state: absent
      ignore_errors: true

    - name: Update SSH configuration to be more secure.
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        validate: 'sshd -t -f %s'
      with_items:
        - regexp: "^PasswordAuthentication"
          line: "PasswordAuthentication no"
        - regexp: "^PermitRootLogin"
          line: "PermitRootLogin no"
        - regexp: "^AllowUsers"
          line: "AllowUsers {{ ssh_allow_user }}"
      notify: Restart ssh

    - name: Import manala.bind role
      import_role:
        name: manala.roles.bind

    - name: Install firewalld
      apt:
        name: firewalld
        state: present
      register: r_firewalld

    - name: Add firewall rules for bind
      ansible.posix.firewalld:
        state: enabled
        zone: public
        service: dns
        permanent: true
        immediate: true
      when:
        - __manala_bind_options is defined and not __manala_bind_options.failed
        - r_firewalld is defined and r_firewalld

    - name: Add firewall rules for iperf3
      ansible.posix.firewalld:
        state: enabled
        zone: public
        port: 5201/tcp
        permanent: true
        immediate: true
      when: r_firewalld is defined and r_firewalld

    - name: Add RustDesk firewall rules
      ansible.posix.firewalld:
        state: enabled
        zone: public
        port: "{{ item.port }}"
        permanent: true
        immediate: true
      with_items:
        - port: "21115/tcp"
        - port: "21116/tcp"
        - port: "21116/udp"
        - port: "21118/tcp"
        - port: "21117/tcp"
        - port: "21119/tcp"
      when: r_firewalld is defined and r_firewalld

    - name: Remove matomo docker project directory
      ansible.builtin.file:
        path: /root/matomo-docker
        state: "absent"

    - name: Remove renewcerts.sh file from /root/bin
      ansible.builtin.file:
        path: /root/bin/renewcerts.sh
        state: "absent"

    - name: Remove cron to run renewcerts.sh
      ansible.builtin.cron:
        name: renewcerts
        job: /root/bin/renewcerts.sh
        special_time: 'weekly'
        user: root
        state: "absent"

  handlers:
    - name: Restart ssh
      service:
        name: ssh
        state: restarted
...
