---
## main.yml
- name: Applying docker host configuration
  hosts:
    - pi2
    - instance-001
  become: true

  vars:
    ansible_python_interpreter: /usr/bin/python3
    ssh_allow_user: "{{ ansible_user | default(ansible_ssh_user) }}"

  vars_files:
    - vars/main.yml

  roles:
    - geerlingguy.pip
    - geerlingguy.docker

  pre_tasks:

    - name: Check ssh_allow_user is defined and have value
      ansible.builtin.assert:
        that: ssh_allow_user is defined and ssh_allow_user | length >0
        fail_msg: "Usage: ansible-playbook main.yml --extra-vars \"ssh_allow_user=<user>\""

    - name: Ensure apt cache is updated.
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 600

  tasks:

    - name: Add kernel boot parameters cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1
      ansible.builtin.replace:
        path: /boot/firmware/cmdline.txt
        regexp: '(.+?)(?<!cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1)$'
        replace: '\1 cgroup_enable=cpuset cgroup_enable=memory cgroup_memory=1'
      when: inventory_hostname == "pi2"

    - name: Set timezone
      community.general.timezone:
        name: Europe/Copenhagen

    - name: Install vim and iperf3
      ansible.builtin.apt:
        name: iperf3
        state: present
      when: inventory_hostname == "pi2"

    - name: Remove SSH key from root user
      ansible.posix.authorized_key:
        user: root
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub', errors='ignore') }}"
        state: absent

    - name: Update SSH configuration to be more secure.
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        state: present
        validate: 'sshd -t -f %s'
      with_items:
        - regexp: "^PasswordAuthentication"
          line: "PasswordAuthentication no"
        - regexp: "^PermitRootLogin"
          line: "PermitRootLogin no"
        - regexp: "^AllowUsers"
          line: "AllowUsers {{ ssh_allow_user }}"
      notify: Restart ssh

    - name: Install firewalld
      ansible.builtin.apt:
        name: firewalld
        state: present
      register: r_firewalld

    - name: Add Traefik http and https
      ansible.posix.firewalld:
        state: enabled
        zone: public
        service: "{{ item.service }}"
        permanent: true
        immediate: true
      with_items:
        - service: "http"
        - service: "https"
      when: r_firewalld is defined and not r_firewalld.failed

    - name: Add firewall rules for pi-hole
      ansible.posix.firewalld:
        state: enabled
        zone: public
        service: dns
        permanent: true
        immediate: true
      when: r_firewalld is defined and not r_firewalld.failed and inventory_hostname == "pi2"

    - name: Add firewall rules for iperf3
      ansible.posix.firewalld:
        state: enabled
        zone: public
        port: 5201/tcp
        permanent: true
        immediate: true
      when: r_firewalld is defined and not r_firewalld.failed and inventory_hostname == "pi2"

    - name: Add RustDesk firewall rules
      ansible.posix.firewalld:
        state: enabled
        zone: public
        port: "{{ item.port }}"
        permanent: true
        immediate: true
      with_items:
        - port: "21115/tcp"
        - port: "21116/tcp"
        - port: "21116/udp"
        - port: "21118/tcp"
        - port: "21117/tcp"
        - port: "21119/tcp"
      when: r_firewalld is defined and not r_firewalld.failed and inventory_hostname == "pi2"

    - name: Add Croc firewall rules
      ansible.posix.firewalld:
        state: enabled
        zone: public
        port: "{{ item.port }}"
        permanent: true
        immediate: true
      with_items:
        - port: "9009/tcp"
        - port: "9010/tcp"
        - port: "9011/tcp"
        - port: "9012/tcp"
        - port: "9013/tcp"
      when: r_firewalld is defined and not r_firewalld.failed and inventory_hostname == "pi2"

  handlers:
    - name: Restart ssh
      ansible.builtin.service:
        name: ssh
        state: restarted
...
